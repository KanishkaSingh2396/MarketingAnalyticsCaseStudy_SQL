Exploration

We have a total of 7 tables in our ERD for this case study highlighting the important columns which we should use to join our tables for our data analysis task.

Table Investigation

We analysed the relationships between the most important columns from each table to determine if there were one-many, many-one or many-to-many relationships to further guide our table joining investigation.

Join Column Analysis

Explored the different join column values to check the coverage of join columns and also identify any duplicates in joining column values.
Our analysis informed our choice of SQL table join method. In our examples - most of the join column values have a 100% overlap with no duplicate column values
so we have decided to proceed with exclusively INNER JOIN for our SQL scripts. We also confirmed that there was no difference in the row counts by comparing
LEFT JOIN and INNER JOIN results with our previous queries.

Here is a sample of the analysis we completed for our exploration of the dvd_rentals.rental and dvd_rentals.inventory tables:
Perform an anti join to check which column values exist in dvd_rentals.rental but not in dvd_rentals.inventory

-- how many foreign keys only exist in the left table and not in the right?

SELECT
  COUNT(DISTINCT rental.inventory_id)
FROM dvd_rentals.rental
WHERE NOT EXISTS (
  SELECT inventory_id
  FROM dvd_rentals.inventory
  WHERE rental.inventory_id = inventory.inventory_id
);

checked the right side table using the same process: dvd_rentals.inventory

-- how many foreign keys only exist in the right table and not in the left?
-- note the table reference changes
SELECT
  COUNT(DISTINCT inventory.inventory_id)
FROM dvd_rentals.inventory
WHERE NOT EXISTS (
  SELECT inventory_id
  FROM dvd_rentals.rental
  WHERE rental.inventory_id = inventory.inventory_id
);

There seems to be a single value which is not showing up - let’s investigate which film it is:

SELECT *
FROM dvd_rentals.inventory
WHERE NOT EXISTS (
  SELECT inventory_id
  FROM dvd_rentals.rental
  WHERE rental.inventory_id = inventory.inventory_id
);

Conclusion: 

Although there is a single inventory_id record which is missing from the dvd_rentals.rental table - there might be no issues with this discrepancy 
as it seems that some inventory might just never be rented out to customers at the retail rental stores.

Finally - 
let’s confirm that both left and inner joins do not differ at all when we look at the resulting row counts from the joint tables:

DROP TABLE IF EXISTS left_rental_join;
CREATE TEMP TABLE left_rental_join AS
SELECT
  rental.customer_id,
  rental.inventory_id,
  inventory.film_id
FROM dvd_rentals.rental
LEFT JOIN dvd_rentals.inventory
  ON rental.inventory_id = inventory.inventory_id;

DROP TABLE IF EXISTS inner_rental_join;
CREATE TEMP TABLE inner_rental_join AS
SELECT
  rental.customer_id,
  rental.inventory_id,
  inventory.film_id
FROM dvd_rentals.rental
INNER JOIN dvd_rentals.inventory
  ON rental.inventory_id = inventory.inventory_id;

-- Output SQL
(
  SELECT
    'left join' AS join_type,
    COUNT(*) AS record_count,
    COUNT(DISTINCT inventory_id) AS unique_key_values
  FROM left_rental_join
)
UNION
(
  SELECT
    'inner join' AS join_type,
    COUNT(*) AS record_count,
    COUNT(DISTINCT inventory_id) AS unique_key_values
  FROM inner_rental_join
);

Performed this same analysis for all of our tables within our core tables and concluded that the distribution for each of the join keys are as expected 
and are similar to what we see for these first 2 tables.
------------------------------------------------------------------------------------------------------------------------------------------------------
Join Column Analysis Example 2

We also need to investigate the relationships between the actor_id and film_id columns within the dvd_rentals.film_actor table.

hypothesise that one single actor might show up in multiple films and one film can have multiple actors. This is known as a many-to-many relationship.

Let’s perform some analysis on the data tables to see if our hunch is on point:

WITH actor_film_counts AS (
  SELECT
    actor_id,
    COUNT(DISTINCT film_id) AS film_count
  FROM dvd_rentals.film_actor
  GROUP BY actor_id
)
SELECT
  film_count,
  COUNT(*) AS total_actors
FROM actor_film_counts
GROUP BY film_count
ORDER BY film_count DESC;

Let’s also confirm that there are multiple actors per film 

WITH film_actor_counts AS (
  SELECT
    film_id,
    COUNT(DISTINCT actor_id) AS actor_count
  FROM dvd_rentals.film_actor
  GROUP BY film_id
)
SELECT
  actor_count,
  COUNT(*) AS total_films
FROM film_actor_counts
GROUP BY actor_count
ORDER BY actor_count DESC;

we can see that there is indeed a many to many relationship of the film_id and the actor_id columns within the dvd_rentals.film_actor table 
so we must take extreme care when we are joining these 2 tables as part of our analysis 